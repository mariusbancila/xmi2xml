<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:dt="urn:schemas-microsoft-com:datatypes"
  xmlns:msxsl="urn:schemas-microsoft-com:xslt"
  xmlns:msi2xml="https://sourceforge.net/projects/msi2xml/">
<xsl:output method="html" />

  <!-- =============================================== -->
  <!-- Extract node value as string                    -->
  <!-- =============================================== -->
  <msxsl:script implements-prefix="msi2xml" language="VBScript">
    <![CDATA[
      Function NodeTypedValue(node)
        NodeTypedValue = Cstr(node.nextNode.nodeTypedValue)
      End Function
  ]]>
  </msxsl:script>

  <!-- =============================================== -->
  <!-- Root Template                                   -->
  <!-- =============================================== -->
  <xsl:template match="/">
    <html>
      <head>
        <xsl:call-template name="script"/>
      </head>
      <body>
        <h1>Windows Installer Database</h1>
        <p>
          <address>
            Generated by msi2xml (c) 2001-2007 <a href="mailto:gehriger@linkcad.com">Daniel Gehriger</a>
          </address>
        </p>
        <hr/>

        <!-- Summary Info -->
        <xsl:apply-templates select="/msi/summary"/>
        <hr/>

        <!-- TOC -->
        <a name="___TOC___"/>
        <h2>Table of Contents</h2>
        <xsl:for-each select="/msi/table[row]">
          <a>
            <xsl:attribute name="href">
              #<xsl:value-of select="@name"/>
            </xsl:attribute>
            <xsl:value-of select="@name"/>
          </a>
          <xsl:text> | </xsl:text>
        </xsl:for-each>
        <hr/>

        <!-- Tables -->
        <xsl:apply-templates select="/msi/table[row]"/>

      </body>
    </html>
  </xsl:template>

  <!-- =============================================== -->
  <!-- Summary Information Template                    -->
  <!-- =============================================== -->
  <xsl:template match="/msi/summary">
    <h2>Summary Information</h2>
    <table>
      <tr>
        <td>
          <b>Title:</b>
        </td>
        <td>
          <xsl:value-of select="//summary/title"/>
        </td>
      </tr>
      <tr>
        <td>
          <b>Subject:</b>
        </td>
        <td>
          <xsl:value-of select="//summary/subject"/>
        </td>
      </tr>
      <tr>
        <td>
          <b>Author:</b>
        </td>
        <td>
          <xsl:value-of select="//summary/author"/>
        </td>
      </tr>
      <tr>
        <td>
          <b>Keywords:</b>
        </td>
        <td>
          <xsl:value-of select="//summary/keywords"/>
        </td>
      </tr>
      <tr>
        <td>
          <b>Comments:</b>
        </td>
        <td>
          <xsl:value-of select="//summary/comments"/>
        </td>
      </tr>
      <tr>
        <td>
          <b>Revision Number:</b>
        </td>
        <td>
          <xsl:value-of select="//summary/revnumber"/>
        </td>
      </tr>
      <tr>
        <td>
          <b>Last Saved By:</b>
        </td>
        <td>
          <xsl:value-of select="//summary/lastauthor"/>
        </td>
      </tr>
      <tr>
        <td>
          <b>Last Saved Date/Time:</b>
        </td>
        <td>
          <xsl:value-of select="//summary/lastsavedtm"/>
        </td>
      </tr>
    </table>
  </xsl:template>

  <!-- =============================================== -->
  <!-- Table Template                                  -->
  <!-- =============================================== -->
  <xsl:template match="/msi/table">
    <xsl:call-template name="tableTitle"/>
    <table border="1">
      <xsl:call-template name="tableHeader"/>
      <tbody>
        <xsl:for-each select="row">
          <tr>
            <xsl:apply-templates select="."/>
          </tr>
        </xsl:for-each>
      </tbody>
    </table>
  </xsl:template>

  <!-- =============================================== -->
  <!-- Table Template (numerically sorted)             -->
  <!-- =============================================== -->
  <xsl:template match="/msi/table[col[1]/@key='yes' and substring(col[1]/@def, 1,1)='i']">
    <xsl:call-template name="tableTitle"/>
    <table border="1">
      <xsl:call-template name="tableHeader"/>
      <tbody>
        <xsl:for-each select="row">
          <xsl:sort data-type="number" select="td[1]"/>
          <tr>
            <xsl:apply-templates select="."/>
          </tr>
        </xsl:for-each>
      </tbody>
    </table>
  </xsl:template>

  <!-- =============================================== -->
  <!-- Table Template (With Sequence Number Sorting    -->
  <!-- =============================================== -->
  <xsl:template match="/msi/table[col[3]='Sequence']">
    <xsl:call-template name="tableTitle"/>
    <table border="1">
      <xsl:call-template name="tableHeader"/>
      <tbody>
        <xsl:for-each select="row">
          <xsl:sort data-type="number" select="td[3]"/>
          <tr>
            <xsl:apply-templates select="."/>
          </tr>
        </xsl:for-each>
      </tbody>
    </table>
  </xsl:template>

  <!-- =============================================== -->
  <!-- Table Title Template                            -->
  <!-- =============================================== -->
  <xsl:template name="tableTitle">
    <a>
      <xsl:attribute name="name">
        <xsl:value-of select="@name"/>
      </xsl:attribute>
    </a>
    <h2>
      <xsl:value-of select="@name"/>
    </h2>

    <!-- links -->
    <xsl:if test="preceding-sibling::*[row][1]">
      <a>
        <xsl:attribute name="href">
          #<xsl:value-of select="preceding-sibling::*[row][1]/@name"/>
        </xsl:attribute>previous
      </a>
      <xsl:text> | </xsl:text>
    </xsl:if>

    <a href="#___TOC___">TOC</a>

    <xsl:if test="following-sibling::*[row][1]">
      <xsl:text> | </xsl:text>
      <a>
        <xsl:attribute name="href">
          #<xsl:value-of select="following-sibling::*[row][1]/@name"/>
        </xsl:attribute>next
      </a>
    </xsl:if>
  </xsl:template>

  <!-- =============================================== -->
  <!-- Table Column Header Template                    -->
  <!-- =============================================== -->
  <xsl:template name="tableHeader">
    <thead>
      <xsl:for-each select="col">
        <th>
          <xsl:attribute name="onmouseover">
            Tip '<xsl:value-of select="parent::node()/@name"/>','<xsl:value-of select="."/>'
          </xsl:attribute>
          <code>
            <xsl:value-of select="."/>
            <xsl:if test="@key='yes'">
              <xsl:text> (key)</xsl:text>
            </xsl:if>
          </code>
          <br>
            <xsl:value-of select="@def"/>
          </br>
        </th>
      </xsl:for-each>
    </thead>
  </xsl:template>

  <!-- =============================================== -->
  <!-- Table Row Template                              -->
  <!-- =============================================== -->
  <xsl:template match="/msi/table/row">
    <xsl:for-each select="td">
      <td>
        <xsl:variable name="pos" select="position()"/>
        <xsl:variable name="col" select="ancestor::table/col[$pos]"/>

        <xsl:attribute name="onmouseover">
          Tip '<xsl:value-of select="ancestor::table/@name"/>','<xsl:value-of select="$col"/>'
        </xsl:attribute>

        <xsl:choose>
          <xsl:when test=".=''">
            <xsl:apply-templates select="."/>
          </xsl:when>
          <xsl:when test="substring($col, string-length($col), 1)='_'">
            <a>
              <xsl:attribute name="href">
                #<xsl:value-of select="substring($col, 1, string-length($col)-1)"/>.<xsl:value-of select="."/>
              </xsl:attribute>
              <xsl:apply-templates select="."/>
            </a>
          </xsl:when>
          <xsl:when test="$col/@key='yes'">
            <a>
              <xsl:attribute name="name">
                <xsl:value-of select="ancestor::table/@name"/>.<xsl:value-of select="."/>
              </xsl:attribute>
              <xsl:apply-templates select="."/>
            </a>
          </xsl:when>
          <xsl:otherwise>
            <xsl:apply-templates select="."/>
          </xsl:otherwise>
        </xsl:choose>
      </td>
    </xsl:for-each>
  </xsl:template>

  <!-- =============================================== -->
  <!-- Table Field Template                            -->
  <!-- =============================================== -->
  <xsl:template match="/msi/table/row/td">

    <xsl:variable name="pos" select="count(./preceding-sibling::*) + 1"/>
    <xsl:variable name="col" select="ancestor::table/col[$pos]"/>
    <xsl:variable name="type" select="translate($col/@def,'GJSLIV','gjsliv')" />

    <xsl:choose>

      <!-- external reference -->
      <xsl:when test="@href">
        <i>
          binary stream
          <a>
            <xsl:attribute name="href">
              <xsl:value-of select="@href"/>
            </xsl:attribute>save to disk
          </a>
        </i>
      </xsl:when>

      <!-- NULL -->
      <xsl:when test=". = ''">
        <i>Null</i>
      </xsl:when>

      <!-- base64 encoded binary data -->
      <xsl:when test="@dt:dt='bin.base64'">

        <xsl:choose>
          <xsl:when test="$type='v0'">
            <i>
              binary stream
              <xsl:if test="@md5">
                (<a>
                  <xsl:attribute name="href">
                    #<xsl:value-of select="ancestor::table/@name"/>
                  </xsl:attribute>
                  <xsl:attribute name="onClick">
                    WriteBinData '<xsl:value-of select="@md5"/>', '<xsl:value-of
select="ancestor::row/td[1]/."/>'
                  </xsl:attribute>save to disk
                </a>)
              </xsl:if>
            </i>
          </xsl:when>

          <xsl:otherwise>
            <code>
              <xsl:value-of select="msi2xml:NodeTypedValue(.)" />
            </code>

          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>

      <!-- default -->
      <xsl:otherwise>
        <code>
          <xsl:value-of select="."/>
        </code>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- =============================================== -->
  <!-- Script Template                                 -->
  <!-- =============================================== -->
  <xsl:template name="script">
    <script language="vbscript" type="text/vbscript">
      <![CDATA[
  <!--
  
  Sub Tip(strTable, strColumn)
    strQuery = "/msi/table[@name='_Validation']/" & _
               "row[td[0]='" & strTable & "' and " & _
               "td[1]='" & strColumn & "']/td[9]"
    Dim oNode
    Set oNode = document.XMLDocument.selectSingleNode(strQuery)
    If oNode Is Nothing Then
        window.event.srcElement.title = strQuery
    Else
        window.event.srcElement.title = oNode.nodeTypedValue
    End If
    
  End Sub
  
  Function WriteBinData(strMD5, name)
    WriteBinData = False
    Dim oNode
    Set oNode = document.XMLDocument.selectSingleNode("//td[@md5='" & strMD5 & "']")
    If oNode Is Nothing Then
      MsgBox "Unable to find binary data."
      Exit Function
    End If
    
    Dim strSaveTo
    If document.location.protocol = "file:" Then
      strSaveTo = document.location.pathname
      Dim LPath
      LPath = InStrRev(strSaveTo, "/")
      If LPath = 0 Then
        LPath = InStrRev(strSaveTo, "\\")        
      End If
      strSaveTo = Mid(strSaveTo, 2, LPath - 1)
    End If
    strSaveTo = Inputbox("Save binary stream as:", "Save Binary File As", strSaveTo & name)
    
    If strSaveTo = "" Then
      Exit Function
    End If
      
    With CreateObject("Scripting.FileSystemObject")
      With .CreateTextFile(strSaveTo, True, False)
        Dim RS, LBinary, Bin
        Bin = oNode.nodeTypedValue
        LBinary = LenB(Bin)
        If LBinary>0 Then
          Set RS = CreateObject("ADODB.Recordset")
          RS.Fields.Append "mBinary", 201, LBinary
          RS.Open
          RS.AddNew
          RS("mBinary").AppendChunk Bin 
          RS.Update
          .Write RS("mBinary")
          RS.Close
        End If
        .Close
      End With ' Output file
    End With ' FSO
    
    window.status = "Done."
  End Function 
  
  -->
  ]]>
    </script>
  </xsl:template>

</xsl:stylesheet>
